const fs = require('fs');
// use toStrFromTxt to require raw text
const toStrFromTxt = (location) => fs.readFileSync(location, 'utf8');

// query: "from siem.logtrust.web.activity group by eventdate, username, type a"
const genericError1 = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/genericError1.txt');

/** query: "select * from siem.logtrust.web.activity where domain in
(from siem.logtrust.web.navigation where yesterday() < eventdate < now() select domain)"
*/
const specificError1 = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/specificError1Response.txt');

// this error happens when we use invalid credentials
const invalidCredentialsError = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/invalidCredentialsError.txt');

// error generated by browser-sdk after receiving from malote specificError1
// this is not an error generated by malote but by browser-sdk
const specificError1Response = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/specificError1Response.txt');

const invalidCredentialsErrorResponse = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/invalidCredentialsErrorResponse.txt');

const wrongOperation = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorWrongOperation.txt');

const launchingQuery = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorLaunchingQuery.txt');

const javaNullPointer = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorJavaNullPointer.txt');

const managingTask = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorManagingTask.txt');

const startingTask = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorStartingTask.txt');

const whileExecutingTask = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorWhileExecutingTask.txt');

const wrongFieldName = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorWrongFieldName.txt');

const tableNotFound = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorTableNotFound.txt');

const tableForbidden = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorForbiddenTable.txt');

const canceledQuery = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/canceledQuery.txt');

const accessNotAllowed = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/accessNotAllowedError.txt');

const unauthorizedMessage = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/unauthorizedMessage.txt');

const errorNdjson = toStrFromTxt('./test/fetchStreamReadable/mocks/errors/errorNdjson.txt');

module.exports = {
  genericError1,
  specificError1,
  specificError1Response,
  invalidCredentialsError,
  invalidCredentialsErrorResponse,
  accessNotAllowed,
  canceledQuery,
  javaNullPointer,
  launchingQuery,
  managingTask,
  startingTask,
  tableForbidden,
  tableNotFound,
  unauthorizedMessage,
  whileExecutingTask,
  wrongFieldName,
  wrongOperation,
  errorNdjson,
};
