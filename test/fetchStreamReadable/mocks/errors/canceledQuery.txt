{"msg":"","status":0,"timestamp":1612961429815,"cid":"72c8fb09eb15","object":{"m":{"eventdate":{"type":"timestamp","index":0},"username":{"type":"str","index":1}},"metadata":[{"name":"eventdate","type":"timestamp"},{"name":"username","type":"str"}],"d":[ [1612961399000,"fake@email.com"],[1612961399000,"fake@email.com"],[1612961402000,"fake@email.com"],[1612961403000,"fake@email.com"],[1612961405000,"fake@email.com"],[1612961405000,"fake@email.com"],[1612961407000,"fake@email.com"],[1612961409000,"fake@email.com"],[1612961409000,"fake@email.com"],[1612961410000,"fake@email.com"],[1612961410000,"fake@email.com"],[1612961414000,"fake@email.com"],[1612961415000,"fake@email.com"],[1612961417000,"fake@email.com"],[1612961418000,"fake@email.com"],[1612961420000,"fake@email.com"],[1612961425000,"fake@email.com"],[1612961425000,"fake@email.com"],[1612961427000,"fake@email.com"],[1612961429000,"fake@email.com"],[1612961430000,"fake@email.com"],[1612961430000,"fake@email.com"],[1612961432000,"fake@email.com"] ,[1612961433000,"fake@email.com"],[1612961435000,"fake@email.com"],[1612961436000,"fake@email.com"] ,[1612961438000,"fake@email.com"],[1612961439000,"fake@email.com"],[1612961440000,"fake@email.com"],[1612961441000,"fake@email.com"] ,[1612961444000,"fake@email.com"],[1612961447000,"fake@email.com"] ,[1612961448000,"fake@email.com"],[1612961449000,"fake@email.com"],[1612961452000,"fake@email.com"]  ,[1612961458000,"fake@email.com"],[1612961459000,"fake@email.com"],[1612961460000,"fake@email.com"],[1612961462000,"fake@email.com"] ,[1612961463000,"fake@email.com"],[1612961463000,"fake@email.com"],[1612961465000,"fake@email.com"] ,[1612961469000,"fake@email.com"],[1612961470000,"fake@email.com"],[1612961470000,"fake@email.com"],[1612961471000,"fake@email.com"] ,[1612961473000,"fake@email.com"],[1612961474000,"fake@email.com"],[1612961475000,"fake@email.com"] ,[1612961478000,"fake@email.com"],[1612961479000,"fake@email.com"],[1612961481000,"fake@email.com"],[1612961482000,"fake@email.com"] ,[1612961484000,"fake@email.com"],[1612961484000,"fake@email.com"],[1612961485000,"fake@email.com"],[1612961486000,"fake@email.com"],[1612961487000,"fake@email.com"] ,[1612961489000,"fake@email.com"],[1612961490000,"fake@email.com"],[1612961490000,"fake@email.com"] ,[1612961492000,"fake@email.com"],[1612961492000,"fake@email.com"],[1612961493000,"fake@email.com"],[1612961494000,"fake@email.com"],[1612961495000,"fake@email.com"],[1612961495000,"fake@email.com"],[1612961495000,"fake@email.com"],[1612961496000,"fake@email.com"] ,[1612961496000,"fake@email.com"],[1612961499000,"fake@email.com"],[1612961500000,"fake@email.com"],[1612961500000,"fake@email.com"] ,[1612961502000,"fake@email.com"],[1612961503000,"fake@email.com"],[1612961504000,"fake@email.com"],[1612961505000,"fake@email.com"] ,[1612961508000,"fake@email.com"] ,[1612961511000,"fake@email.com"],[1612961512000,"fake@email.com"],[1612961515000,"fake@email.com"],[1612961516000,"fake@email.com"] ,[1612961519000,"fake@email.com"],[1612961522000,"fake@email.com"],[1612961522000,"fake@email.com"],[1612961523000,"fake@email.com"],[1612961523000,"fake@email.com"],[1612961525000,"fake@email.com"],[1612961526000,"fake@email.com"],[1612961526000,"fake@email.com"] ,[1612961529000,"fake@email.com"],[1612961530000,"fake@email.com"],[1612961530000,"fake@email.com"] ,[1612961533000,"fake@email.com"]],"e":[500,"Error Processing Query: Error from server: fake.server.StaticException: Error when retrieving data from DelegateId[amazon.eu-west.collector.logtrust.net/00.00.00.000:10010, name: amazon.eu-west.collector.logtrust.net:10010, tags: [cloud, i1, main, lookupmanager]]: Error from server: java.lang.IllegalStateException: Cannot continue consuming memory, but no reason given [MConnectionImpl[address: amazon.eu-west.collector.logtrust.net/00.00.00.000,\n  port: 10010,\n  connected: /00.00.00.000:63879 -> amazon.eu-west.collector.logtrust.net/00.00.00.000:10010,\n  lang: sql,\n  user: root,\n  obo: serrea,\n  for server: true,\n  spec: Spec[MQP:1.7],\n  requested oks: 2,\n  received oks: 2,\n  error: null,\n  in ended: false,\n  sending out: false,\n  closed: false,\n  close trace: null,\n  next id: 49,\n  current cursors: \n    48: MCursorImpl[id: 48,\n      query: Problem[sql: select period(timestamp(0),eventdate,duration(1000)), username from siem.logtrust.web.activity where ((le(timestamp(1612961399000),eventdate) and eq(client,\"self\"))) group by period(timestamp(0),eventdate,duration(1000)), username pragma preaggr.transparent.allowed: true, preaggr.transparent.impure.allowed: true, comment.application: \"#dashboard#db_id_1729554#db_name_Dani%20test%20errors%20parse#\", comment.component: \"#widget#w_namespace_Table0#w_name_Table0#\", comment.free: \"#redada#user_daniel.moreno#db_id_1729554#db_name_Dani%20test%20errors%20parse#w_namespace_Table0#w_name_Table0#\", preaggr.transparent.max.uncovered: duration(3600000), subquery.timespan.inherit.when: \"absent\", subquery.timespan.inherit.action: \"replace\", subquery.timespan.trim.above: true, alg.concat.null: \"null\", quota.cpu.priority.problem: int4(2), comment.user: \"daniel.moreno\", comment.userid: \"fake@email.com\", comment.email: \"fake@email.com\", proc.vault.name: \"normal\", comment.uuid: \"72c8fb09eb15\", comment.domain: \"self\", comment.dateinit: \"2021-02-10T12:49:59\", comment.source: \"from siem.logtrust.web.activity group every 1s by username pragma proc.vault.name: \\\"normal\\\", preaggr.transparent.allowed: true, preaggr.transparent.impure.allowed: true, comment.application: \\\"#dashboard#db_id_1729554#db_name_Dani%20test%20errors%20parse#\\\", comment.component: \\\"#widget#w_namespace_Table0#w_name_Table0#\\\", comment.free: \\\"#redada#user_daniel.moreno#db_id_1729554#db_name_Dani%20test%20errors%20parse#w_namespace_Table0#w_name_Table0#\\\" pragma preaggr.transparent.max.uncovered: 1h\", preaggr.transparent.resolved: timerangepartition(), preaggr.grains.peraggr.validity: emptymap(tyterm(\"name\"),tyterm(\"map(duration, timerange)\")), delegation.now: timestamp(1612961429809), null],\n      columns: Column[name: eventdate, type: timestamp],Column[name: username, type: str],\n      stall type: MTypeInfo[malote type: timestamp, class: malote.value.Moment, jdbc type: 93],MTypeInfo[malote type: timestamp, class: malote.value.Moment, jdbc type: 93],\n      requested: 2000,\n      cancel sent: false,\n      closed: false,\n      close trace: null,\n      out: 0, 108, 0,\n      in: true, 0, 9, 112\n    ]\n]] [MConnectionImpl[address: eu.elb.malote.logtrust.net/00.00.00.000,\n  port: 10010,\n  connected: /00.00.00.000:52758 -> eu.elb.malote.logtrust.net/00.00.00.000:10010,\n  lang: linq,\n  user: serrea,\n  obo: serrea,\n  for server: false,\n  spec: Spec[MQP:1.7],\n  requested oks: 45,\n  received oks: 45,\n  error: null,\n  in ended: false,\n  sending out: false,\n  closed: false,\n  close trace: null,\n  next id: 43,\n  current cursors: \n    42: MCursorImpl[id: 42,\n      query: Problem[linq: from siem.logtrust.web.activity where le(timestamp(1612961399000), eventdate) where eq(client, 'self') group every 1s by username pragma preaggr.transparent.allowed: true pragma preaggr.transparent.impure.allowed: true pragma comment.application: \"#dashboard#db_id_1729554#db_name_Dani%20test%20errors%20parse#\" pragma comment.component: \"#widget#w_namespace_Table0#w_name_Table0#\" pragma comment.free: \"#redada#user_daniel.moreno#db_id_1729554#db_name_Dani%20test%20errors%20parse#w_namespace_Table0#w_name_Table0#\" pragma preaggr.transparent.max.uncovered: 1h pragma subquery.timespan.inherit.when: \"absent\" pragma subquery.timespan.inherit.action: \"replace\" pragma subquery.timespan.trim.above: true pragma alg.concat.null: \"null\" pragma quota.cpu.priority.problem: 2 pragma comment.user: \"daniel.moreno\" pragma comment.userid: \"fake@email.com\" pragma comment.email: \"fake@email.com\" pragma proc.vault.name: \"normal\" pragma comment.uuid: \"72c8fb09eb15\" pragma comment.domain: \"self\" pragma comment.dateinit: \"2021-02-10T12:49:59\" pragma comment.source: \"from siem.logtrust.web.activity group every 1s by username pragma proc.vault.name: \\\"normal\\\", preaggr.transparent.allowed: true, preaggr.transparent.impure.allowed: true, comment.application: \\\"#dashboard#db_id_1729554#db_name_Dani%20test%20errors%20parse#\\\", comment.component: \\\"#widget#w_namespace_Table0#w_name_Table0#\\\", comment.free: \\\"#redada#user_daniel.moreno#db_id_1729554#db_name_Dani%20test%20errors%20parse#w_namespace_Table0#w_name_Table0#\\\" pragma preaggr.transparent.max.uncovered: 1h\", null],\n      columns: Column[name: eventdate, label: eventdate, type: timestamp],Column[name: username, type: str],\n      stall type: MTypeInfo[malote type: timestamp, class: malote.value.Moment, jdbc type: 93],MTypeInfo[malote type: timestamp, class: malote.value.Moment, jdbc type: 93],\n      requested: 1200,\n      cancel sent: false,\n      closed: false,\n      close trace: null,\n      out: 0, 119, 0,\n      in: false, 0, 0, 119\n    ]\n]]"]}}